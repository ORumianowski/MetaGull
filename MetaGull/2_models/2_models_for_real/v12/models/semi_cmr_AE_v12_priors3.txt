
model {
 # -------------------------------------------------
  # Stages:
  # N: not-yet recruited individuals
  # B: breeders
  # Parameters:
  # phi[age]: survival probability
  # eta_t[departure site, arrival site, time]: natal dispersal
  # nu_t[departure site, arrival site, time]: breeding dispersal
  # kappa[site]: recruitment probability - two classes (LaRonze or not)
  # rho[site]: productivity - two classes (LaRonze or not)
  # p[site, time]: recapture probability 
  # -------------------------------------------------
  # Priors 
  
  # rho[1] ~ dunif(0, 3) # Productivity - La Ronze
  # rho[2] ~ dunif(0, 3) # Productivity - Satellite colonies
  
  phi[1] ~  dunif(0.273-0.10, 0.273+0.10) # Survival prob. - First year
  phi[2]  ~ dunif(0.828-0.10, 0.828+0.10) # Survival prob. - Subadult and adults
  
  kappa[1] ~ dunif(0.716-0.10, 0.716+0.10) # Recruitment prob. -  La Ronze
  kappa[2] ~ dunif(0.827-0.10, 0.827+0.10) # Recruitment prob. -  Satellite colonies
  
  # eta : parameter which is defined with a prior - at this stage: sum(eta[dep,]) is not equal to 1
  # eta_monitored : parameter of interest, eta_monitored is eta normalised i.e. sum equal to 1
  # eta_ext depends partly on time. It is set to eta by default and updated in the event of extinction
  # eta_t is the normalized and updated version of eta - This is the one used in the process equation.
  
  for (dep in 1:n.colony){
    for (arr in 1:n.colony){
      eta[dep, arr]  ~ dunif(0, 1)   # natal dispersal
      nu[dep, arr]  ~ dunif(0, 1)    # breeding dispersal
    }
  }
  
  for (dep in 1:n.colony){
    for (arr in 1:n.colony){
      eta_monitored[dep, arr] <- (eta[dep, arr] / sum(eta[dep,])) 
      nu_monitored[dep, arr] <- (nu[dep, arr] / sum(nu[dep,])) 
    }
  }
  
  for (colony in 1:n.colony){
    natalfidelity[colony] <- eta_monitored[colony,colony]
    breedingfidelity[colony] <- nu_monitored[colony,colony]
  }
  
  for (t in 1:(n.years-1)){
    for (dep in 1:n.colony){
      for (arr in 1:n.colony){
          eta_ext[dep, arr, t] <-  eta[dep, arr]  * (1-equals(E[arr,(t+1)],0)) # The value is 0 if you are moving towards a colony that has disappeared
          nu_ext[dep, arr, t] <- nu[dep, arr] * (1-equals(E[arr,(t+1)],0)) # The value is 0 if you are moving towards a colony that has disappeared
      }
    }
  }
  
  for (t in 1:(n.years-1)){
    for (dep in 1:n.colony){
      for (arr in 1:n.colony){
          eta_t[dep, arr, t] <-  (eta_ext[dep, arr, t] / sum(eta_ext[dep, , t]))  
          nu_t[dep, arr, t] <- (nu_ext[dep, arr, t] / sum(nu_ext[dep, , t]))   
      }
    }
  }
   
  # # Population count data (state-space model)
  # 
  # # Models for the initial population size: uniform priors
  # for (col in 1:n.colony){
  #   B[col,1] ~ dunif(pop_init[col,2], pop_init[col,3])
  #   N[col,1] ~ dunif(pop_init[col,4], pop_init[col,5])
  # }
  # 
  #  # Process model over time: our model of population dynamics
  # for (t in 1:(n.years-1)){
  #   for (s in 1:n.colony){
  # 
  #   N[s,t+1] <- B[s,t] * rho[col2colclass[s]] * phi[1] +
  #               N[s,t] * phi[2] * sum(eta_t[s,1:n.colony,t] * (1-kappa[col2colclass]))
  # 
  #   B[s,t+1] <- sum(N[1:n.colony,t] * phi[2] * eta_t[1:n.colony,s,t]  * kappa[col2colclass[s]] ) +
  #               sum(B[1:n.colony,t] * phi[2] * nu_t[1:n.colony,s,t])
  #   }
  # }
  # 
  # # Residual (observation) error
  # 
  # sigma[1] ~ dunif(0.01, 1000) # La Ronze
  # sigma[2] ~ dunif(0.01, 1000) # Satellite colonies
  # 
  # # Survey observation model
  # for (t in 1:(n.years)){
  #   for (s in 1:n.colony){
  # 
  #   R[s,t] <- sigma[col2colclass[s]] * B[s,t]* (1-equals(E[s,t],0)) + 1E-9
  #   tau[s,t] <- pow(R[s,t], -2)
  # 
  #     C[s,t] ~ dnorm(B[s,t],tau[s,t])
  #   }
  # }


  
  # Define state-transition - CMR multistate
  for (t in 1:(n.years-1)){
    # Nestling
    for (prev.state in nest.states){
      # nestlings may become pre breeders
      for (next_state in prebr.states){
        psi[prev.state,next_state,t] <- phi[1] * equals(state2col[next_state], state2col[prev.state]) 
      }
      # nestlings do not become nestling or breeders
      for (next_state in c(nest.states,breed.states)){
        psi[prev.state,next_state,t] <- 0
      }
    }
    # Breeders
    for (prev.state in breed.states){
      # Breeders may stay breeders
      for (next_state in breed.states){
        psi[prev.state,next_state,t] <- phi[2] * nu_t[state2col[prev.state],state2col[next_state],t]
      }
      # Breeders cannot become nestling or prebreeders
          for (next_state in c(nest.states, prebr.states)){
        psi[prev.state,next_state,t] <- 0
      }
    }
    # Pre-Breeders
    for (prev.state in prebr.states){
     # Prebreeders cannot become nestling
      for (next_state in nest.states){
        psi[prev.state,next_state,t] <- 0
      }
      
    # Prebreeders may become breeders
    for (next_state in breed.states){
        psi[prev.state,next_state,t] <- phi[2] * kappa[state2colclass[next_state]] * eta_t[state2col[prev.state],state2col[next_state],t]
    }
    
    # Prebreeders may stay prebreeders
    for (next_state in prebr.states){
          psi[prev.state,next_state,t] <- equals(state2col[next_state], state2col[prev.state]) 
          * phi[2] * sum(eta_t[state2col[prev.state],1:n.colony,t] * (1-kappa[col2colclass]))
        
      }  
    }
  }

  #
  mean_p_LR ~ dunif(0, 0.3)
  mean_p_SAT ~ dunif(0, 0.6)
  var_p_LR ~ dunif(0.01, 100)
  var_p_SAT ~ dunif(0.01, 100)
  
  #  Define re-encounter probabilities
  for (t in 1:(n.years - 1)) {
  # Nestlings & Prebreeders
    for (state in c(nest.states, prebr.states)) {
      po[state, t] <- 0
      }
    }

  # Breeders
  # La Rronze
  for (t in 1:(n.years - 1)) {
    po[6, t] ~ dnorm(mean_p_LR, var_p_LR)
  }
  
  
  # Surveyed satellite colonies
  for (k in 1:nrow_detection_index) {
    po[detection_index[k, 1], detection_index[k, 2]] ~ dnorm(mean_p_SAT, var_p_SAT)
  }
  # Non-Surveyed colonies
  for (k in 1:nrow_no_detection_index) {
    po[no_detection_index[k, 1] ,no_detection_index[k, 2]]  <-  0 
  }



    # Calculate probability of non-encounter (dq) and reshape the array for the encounter
    # probabilities
  for (t in 1:(n.years-1)){  
    for (s in 1:ns){
      dp[s,t,s] <- po[s,t]
      dq[s,t,s] <- 1-po[s,t]
    } #s
    for (s in 1:(ns-1)){
      for (m in (s+1):ns){
        dp[s,t,m] <- 0
        dq[s,t,m] <- 0
      } #m
    } #s
    for (s in 2:ns){
      for (m in 1:(s-1)){
        dp[s,t,m] <- 0
        dq[s,t,m] <- 0
      } #m
    } #s
  } #t
  
  # Define the cell probabilities of the multistate m-array
    for (t in 1:(n.years-2)){
      U[(t-1)*ns+(1:ns), (t-1)*ns+(1:ns)] <- ones
      for (j in (t+1):(n.years-1)){
        U[(t-1)*ns+(1:ns), (j-1)*ns+(1:ns)] <- U[(t-1)*ns+(1:ns), (j-2)*ns+(1:ns)] %*% psi[,,j] %*% dq[,t,]
    } #j
  } #t
  
  U[(n.years-2)*ns+(1:ns), (n.years-2)*ns+(1:ns)] <- ones
  
  # Diagonal
  for (t in 1:(n.years-2)){
    pr[(t-1)*ns+(1:ns),(t-1)*ns+(1:ns)] <- U[(t-1)*ns+(1:ns),(t-1)*ns+(1:ns)] %*% psi[,,t] %*% dp[,t,]
  # Above main diagonal
  for (j in (t+1):(n.years-1)){
    pr[(t-1)*ns+(1:ns), (j-1)*ns+(1:ns)] <- U[(t-1)*ns+(1:ns), (j-1)*ns+(1:ns)] %*% psi[,,j] %*% dp[,j,]
    } #j
  } #t
  
  pr[(n.years-2)*ns+(1:ns), (n.years-2)*ns+(1:ns)] <- psi[,,n.years-1] %*% dp[,n.years-1,] 
  
  # Below main diagonal
  for (t in 2:(n.years-1)){
    for (j in 1:(t-1)){
      pr[(t-1)*ns+(1:ns),(j-1)*ns+(1:ns)] <- zero
    } #j
  } #t
  
  # Last column: probability of non-recapture
  for (t in 1:((n.years-1)*ns)){
    pr[t,(n.years*ns-(ns-1))] <- 1-sum(pr[t,1:((n.years-1)*ns)])
  } #t
    
  # Define the multinomial likelihood
  for (t in marr_index_with_cmr){
     marr[t,1:(n.years*ns-(ns-1))] ~ dmulti(pr[t,], rel[t])
  }
}
